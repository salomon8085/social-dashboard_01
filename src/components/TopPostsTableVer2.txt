
import React, { useEffect, useState } from "react";

const TopPostsTable = () => {
  const [posts, setPosts] = useState([]); // ðŸ“Œ Almacena todos los posts obtenidos de la API.
  const [filteredPosts, setFilteredPosts] = useState([]); // ðŸ“Œ Almacena los posts filtrados y ordenados.

  const [sortBy, setSortBy] = useState(null); // ðŸ“Œ Guarda el criterio de ordenaciÃ³n actual.
  const [ascending, setAscending] = useState(true); // ðŸ“Œ Indica si la ordenaciÃ³n es ascendente o descendente.

  const [searchTerm, setSearchTerm] = useState(""); // ðŸ“Œ Almacena el tÃ©rmino de bÃºsqueda.

  // ðŸ“Œ useEffect se ejecuta cuando el componente se monta para obtener los datos del JSON Server.
  useEffect(() => {
    fetch("http://localhost:5000/posts")
      .then((res) => res.json()) // ðŸ“Œ Convierte la respuesta a JSON.
      .then((data) => {
        setPosts(data); // ðŸ“Œ Guarda la lista original de posts.
        setFilteredPosts(data); // ðŸ“Œ Inicializa los posts filtrados con la lista completa.
      })
      .catch((error) => console.error("Error fetching posts:", error));
  }, []);

  // ðŸ“Œ FunciÃ³n para ordenar los posts segÃºn el campo seleccionado.
  const handleSort = (field) => {
    const isAscending = sortBy === field ? !ascending : true; // ðŸ“Œ Alterna entre ascendente y descendente si se vuelve a hacer clic en la misma columna.
    setSortBy(field);
    setAscending(isAscending);

    // ðŸ“Œ Crea una copia de los posts filtrados y los ordena.
    const sortedPosts = [...filteredPosts].sort((a, b) =>
      isAscending ? a[field] - b[field] : b[field] - a[field]
    );

    setFilteredPosts(sortedPosts); // ðŸ“Œ Actualiza la lista con los posts ordenados.
  };

  // ðŸ“Œ FunciÃ³n para buscar posts segÃºn el tÃ­tulo.
  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase();
    setSearchTerm(value);

    // ðŸ“Œ Filtra los posts que incluyen el tÃ©rmino de bÃºsqueda.
    let filtered = posts.filter((post) =>
      post.title.toLowerCase().includes(value)
    );

    // ðŸ“Œ Si hay un criterio de ordenaciÃ³n, se aplica despuÃ©s de filtrar.
    if (sortBy) {
      filtered = filtered.sort((a, b) =>
        ascending ? a[sortBy] - b[sortBy] : b[sortBy] - a[sortBy]
      );
    }

    setFilteredPosts(filtered); // ðŸ“Œ Se actualiza la lista de posts mostrados.
  };

  return (
    <div className="bg-white p-6 shadow-lg rounded-lg mt-6">
      {/* ðŸ“Œ Contenedor con fondo blanco, sombra y bordes redondeados */}

      <h2 className="text-xl font-bold mb-4">Popular Posts</h2>
      {/* ðŸ“Œ TÃ­tulo principal */}

      {/* ðŸ“Œ Barra de bÃºsqueda */}
      <input
        type="text"
        placeholder="Search posts..." // ðŸ“Œ Texto del placeholder.
        value={searchTerm} // ðŸ“Œ Enlaza el estado con el input.
        onChange={handleSearch} // ðŸ“Œ Ejecuta la bÃºsqueda en cada cambio.
        className="w-full p-2 mb-4 border rounded-lg"
      />

      {/* ðŸ“Œ Tabla de posts */}
      <table className="w-full text-left border-collapse">
        <thead>
          <tr className="bg-gray-100">
            <th className="p-3">Post</th>
            {/* ðŸ“Œ Columnas ordenables con clic */}
            <th className="p-3 cursor-pointer" onClick={() => handleSort("likes")}>
              Likes {sortBy === "likes" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
            <th className="p-3 cursor-pointer" onClick={() => handleSort("comments")}>
              Comments {sortBy === "comments" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
            <th className="p-3 cursor-pointer" onClick={() => handleSort("shares")}>
              Shares {sortBy === "shares" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
          </tr>
        </thead>
        <tbody>
          {filteredPosts.length > 0 ? (
            filteredPosts.map((post) => (
              <tr key={post.id} className="border-b hover:bg-gray-50">
                <td className="p-3">{post.title}</td>
                <td className="p-3">{post.likes}</td>
                <td className="p-3">{post.comments}</td>
                <td className="p-3">{post.shares}</td>
              </tr>
            ))
          ) : (
            <tr>
              {/* ðŸ“Œ Mensaje cuando no hay resultados */}
              <td colSpan="4" className="p-3 text-center text-gray-500">
                No results found
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default TopPostsTable;