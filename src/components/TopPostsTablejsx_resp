import React, { useEffect, useState } from "react";

const TopPostsTable = () => {
  const [posts, setPosts] = useState([]); // Stores all posts from API
  const [filteredPosts, setFilteredPosts] = useState([]); // Stores filtered posts
  const [sortBy, setSortBy] = useState(null); // Stores the sorting field
  const [ascending, setAscending] = useState(true); // Sorting order
  const [searchTerm, setSearchTerm] = useState(""); // Stores the search input value

  useEffect(() => {
    // Fetch data from JSON Server when component mounts
    fetch("http://localhost:5000/posts")
      .then((res) => res.json())
      .then((data) => {
        setPosts(data); // Save original data
        setFilteredPosts(data); // Set filtered data to show initially
      })
      .catch((error) => console.error("Error fetching posts:", error));
  }, []);

  // Sorting function (Sorts by likes, comments, or shares)
  const handleSort = (field) => {
    const isAscending = sortBy === field ? !ascending : true; // Toggle order if clicking the same column
    setSortBy(field);
    setAscending(isAscending);

    const sortedPosts = [...filteredPosts].sort((a, b) => {
      return isAscending ? a[field] - b[field] : b[field] - a[field];
    });

    setFilteredPosts(sortedPosts);
  };

  // ðŸ”¥ NEW: Search function (Filters posts by title)
  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase(); // Get input value
    setSearchTerm(value); // Store in state

    // Filter posts that contain the search term
    const filtered = posts.filter((post) =>
      post.title.toLowerCase().includes(value)
    );
    setFilteredPosts(filtered); // Update displayed data
  };

  return (
    <div className="bg-white p-6 shadow-lg rounded-lg mt-6">
      <h2 className="text-xl font-bold mb-4">Popular Posts</h2>

      {/* ðŸ”¥ NEW: Search Bar */}
      <input
        type="text"
        placeholder="Search posts..." // Input placeholder text
        value={searchTerm} // Controlled input (connected to state)
        onChange={handleSearch} // Calls handleSearch() on input change
        className="w-full p-2 mb-4 border rounded-lg"
      />

      <table className="w-full text-left border-collapse">
        <thead>
          <tr className="bg-gray-100">
            <th className="p-3">Post</th>
            {/* Sorting on Click */}
            <th
              className="p-3 cursor-pointer"
              onClick={() => handleSort("likes")}
            >
              Likes {sortBy === "likes" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
            <th
              className="p-3 cursor-pointer"
              onClick={() => handleSort("comments")}
            >
              Comments {sortBy === "comments" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
            <th
              className="p-3 cursor-pointer"
              onClick={() => handleSort("shares")}
            >
              Shares {sortBy === "shares" ? (ascending ? "â†‘" : "â†“") : ""}
            </th>
          </tr>
        </thead>
        <tbody>
          {/* Render filtered posts */}
          {filteredPosts.length > 0 ? (
            filteredPosts.map((post) => (
              <tr key={post.id} className="border-b hover:bg-gray-50">
                <td className="p-3">{post.title}</td>
                <td className="p-3">{post.likes}</td>
                <td className="p-3">{post.comments}</td>
                <td className="p-3">{post.shares}</td>
              </tr>
            ))
          ) : (
            <tr>
              {/* ðŸ”¥ NEW: Message when no results are found */}
              <td colSpan="4" className="p-3 text-center text-gray-500">
                No results found
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default TopPostsTable;
